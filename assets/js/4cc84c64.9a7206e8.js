"use strict";(self.webpackChunkpython_guts=self.webpackChunkpython_guts||[]).push([[6774],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={tags:["\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c","multiprocessing","threading","viztracer"]},o="VizTracer",s={unversionedId:"notes/threading-and-async/viztracer",id:"notes/threading-and-async/viztracer",title:"VizTracer",description:"VizTracer - \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.",source:"@site/docs/notes/threading-and-async/viztracer.md",sourceDirName:"notes/threading-and-async",slug:"/notes/threading-and-async/viztracer",permalink:"/python-guts/docs/notes/threading-and-async/viztracer",draft:!1,editUrl:"https://github.com/insaze/python-guts/tree/main/docs/notes/threading-and-async/viztracer.md",tags:[{label:"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",permalink:"/python-guts/docs/tags/\u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{label:"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c",permalink:"/python-guts/docs/tags/\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{label:"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c",permalink:"/python-guts/docs/tags/\u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c"},{label:"multiprocessing",permalink:"/python-guts/docs/tags/multiprocessing"},{label:"threading",permalink:"/python-guts/docs/tags/threading"},{label:"viztracer",permalink:"/python-guts/docs/tags/viztracer"}],version:"current",frontMatter:{tags:["\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c","multiprocessing","threading","viztracer"]},sidebar:"tutorialSidebar",previous:{title:"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439",permalink:"/python-guts/docs/notes/threading-and-async/asyncify"},next:{title:"\u0417\u0430\u0434\u0430\u0447\u0438",permalink:"/python-guts/docs/tasks/"}},l={},p=[{value:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b",id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b",level:2},{value:"\u0427\u0438\u0441\u043b\u0430 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438. \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u044f",id:"\u0447\u0438\u0441\u043b\u0430-\u0444\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438-\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f",level:3},{value:"threading",id:"threading",level:3},{value:"IO-bound",id:"io-bound",level:4},{value:"CPU-bound",id:"cpu-bound",level:4},{value:"multiprocessing",id:"multiprocessing",level:3},{value:"\u041f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432",id:"\u043f\u0443\u043b-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432",level:4},{value:"\u041f\u0443\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432",id:"\u043f\u0443\u043b-\u043f\u043e\u0442\u043e\u043a\u043e\u0432",level:4},{value:"\u0421\u0441\u044b\u043b\u043a\u0438",id:"\u0441\u0441\u044b\u043b\u043a\u0438",level:2}],u={toc:p},c="wrapper";function d(e){let{components:n,...i}=e;return(0,a.kt)(c,(0,r.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"viztracer"},"VizTracer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"VizTracer")," - \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b."),(0,a.kt)("p",null,"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ pip install viztracer\n")),(0,a.kt)("p",null,"\u0417\u0430\u043f\u0443\u0441\u043a:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ viztracer test.py\n")),(0,a.kt)("p",null,"\u041f\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u0447\u0435\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON."),(0,a.kt)("p",null,"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ vizviewer result.json\n")),(0,a.kt)("h2",{id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b"},"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"),(0,a.kt)("h3",{id:"\u0447\u0438\u0441\u043b\u0430-\u0444\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438-\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f"},"\u0427\u0438\u0441\u043b\u0430 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438. \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u044f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def fibonacci(n: int) -> int:\n    if n < 3:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\nif __name__ == '__main__':\n    print(fibonacci(10))\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(6976).Z,width:"1920",height:"923"})),(0,a.kt)("p",null,"\u041d\u0430 ",(0,a.kt)("inlineCode",{parentName:"p"},"FlameGraph"),"'\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f - \u0447\u0435\u043c \u043e\u043d\u0430 \u0434\u043b\u0438\u043d\u043d\u0435\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435, \u0442\u0435\u043c \u0434\u043e\u043b\u044c\u0448\u0435."),(0,a.kt)("p",null,"\u0414\u043b\u044f ",(0,a.kt)("inlineCode",{parentName:"p"},"n = 10")," \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 9."),(0,a.kt)("h3",{id:"threading"},"threading"),(0,a.kt)("p",null,"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u0442\u043e\u043a\u0438 \u0441\u0435\u0431\u044f \u0432\u0435\u0434\u0443\u0442 \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 CPU-bound \u0438 IO-bound \u0437\u0430\u0434\u0430\u0447."),(0,a.kt)("h4",{id:"io-bound"},"IO-bound"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import random\nimport time\n\nfrom threading import Thread\n\n\ndef worker():\n    time.sleep(10 * random.random())\n\n\nif __name__ == '__main__':\n    threads = []\n    for _ in range(8):\n        threads.append(Thread(target=worker))\n        threads[-1].start()\n\n    for thread in threads:\n        thread.join()\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(1910).Z,width:"1920",height:"884"})),(0,a.kt)("h4",{id:"cpu-bound"},"CPU-bound"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import random\n\nfrom threading import Thread\n\nresult = 0\n\n\ndef worker():\n    global result\n    for _ in range(100_000):\n        result += random.random()\n\n\nif __name__ == '__main__':\n    threads = []\n    for _ in range(8):\n        threads.append(Thread(target=worker))\n        threads[-1].start()\n\n    for thread in threads:\n        thread.join()\n\n    print(result)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"194685.43393841566\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(6062).Z,width:"1920",height:"884"})),(0,a.kt)("p",null,"\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, ",(0,a.kt)("inlineCode",{parentName:"p"},"worker"),"'\u044b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f GIL."),(0,a.kt)("h3",{id:"multiprocessing"},"multiprocessing"),(0,a.kt)("p",null,"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1,000,000 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432."),(0,a.kt)("h4",{id:"\u043f\u0443\u043b-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"},"\u041f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from multiprocessing import Pool, cpu_count\n\n\ndef sum_of_squares(from_: int, to: int) -> int:\n    result = 0\n    for i in range(from_, to):\n        result += i ** 2\n    return result\n\n\ndef count_sum_of_squares(n: int, chunks: int = cpu_count()) -> int:\n    step: int = n // chunks\n    offset: int = 1\n    ranges = [(step * i + offset, step * (i + 1) + offset)\n              for i in range(chunks)]\n\n    with Pool(chunks) as pool:\n        results = pool.starmap(sum_of_squares, ranges)\n    return sum(results)\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.perf_counter()\n    print(count_sum_of_squares(10_000_000))\n    print(time.perf_counter() - start)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"333333383333335000000\n0.5275702479998472\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(1015).Z,width:"1920",height:"923"})),(0,a.kt)("h4",{id:"\u043f\u0443\u043b-\u043f\u043e\u0442\u043e\u043a\u043e\u0432"},"\u041f\u0443\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from multiprocessing import cpu_count\nfrom multiprocessing.pool import ThreadPool\n\n\ndef sum_of_squares(from_: int, to: int) -> int:\n    result = 0\n    for i in range(from_, to):\n        result += i ** 2\n    return result\n\n\ndef count_sum_of_squares(n: int, chunks: int = cpu_count()) -> int:\n    step: int = n // chunks\n    offset: int = 1\n    ranges = [(step * i + offset, step * (i + 1) + offset)\n              for i in range(chunks)]\n\n    with ThreadPool(chunks) as pool:\n        results = pool.starmap(sum_of_squares, ranges)\n    return sum(results)\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.perf_counter()\n    print(count_sum_of_squares(10_000_000))\n    print(time.perf_counter() - start)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"333333383333335000000\n2.2580976360000022\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(96).Z,width:"1920",height:"747"})),(0,a.kt)("p",null,"\u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u044f \u043f\u0440\u0438\u0448\u0435\u043b \u0432 \u0437\u0430\u043c\u0435\u0448\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e - \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0443\u043c\u0430\u043b, \u0447\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 CPU-bound \u0437\u0430\u0434\u0430\u0447, \u0430 \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e ",(0,a.kt)("inlineCode",{parentName:"p"},"sum_of_squares")," \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e."),(0,a.kt)("p",null,"\u041e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 ",(0,a.kt)("inlineCode",{parentName:"p"},"multiprocessing")," \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0430\u044f, \u0447\u0435\u043c \u0432 ",(0,a.kt)("inlineCode",{parentName:"p"},"threading")," - \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430\u0445:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ python3 test.py &\n[1] 21592\n$ ps -p 21592 -T -o pid,tid,psr,pcpu\n    PID     TID PSR %CPU\n  21592   21592   2  0.1\n  21592   21593   7 13.7\n  21592   21594   4  9.1\n  21592   21595   0 19.5\n  21592   21596   1 11.8\n  21592   21597   5 13.7\n  21592   21598   5 19.3\n  21592   21599   1  8.4\n  21592   21600   2  7.1\n  21592   21601   1  0.0\n  21592   21602   0  0.0\n  21592   21603   1  0.0\n")),(0,a.kt)("h2",{id:"\u0441\u0441\u044b\u043b\u043a\u0438"},"\u0421\u0441\u044b\u043b\u043a\u0438"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://viztracer.readthedocs.io/en/latest/"},"VizTracer. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"))))}d.isMDXComponent=!0},6976:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/viztracer_fibonacci-3e25ec122c30a51984574b0bc1659848.png"},1015:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/viztracer_squares_pool-d322d3b23b1a944a5c18b2e995bcf6fe.png"},96:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/viztracer_squares_threadpool-114ee09c2df47ca9467e61d0a1e6dadf.png"},6062:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/viztracer_threading_cpu-946d2c6dca03f7eccb1ae3d0742bf2f3.png"},1910:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/viztracer_threading_io-bcf5705b9f9723b0f9a75a0b516379d6.png"}}]);