"use strict";(self.webpackChunkpython_guts=self.webpackChunkpython_guts||[]).push([[7392],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||l;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9747:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const l={tags:["\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f","\u0424\u0443\u043d\u043a\u0446\u0438\u0438","\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b","functools"]},o="\u041c\u043e\u0434\u0443\u043b\u044c functools",p={unversionedId:"notes/functional-programming/functools",id:"notes/functional-programming/functools",title:"\u041c\u043e\u0434\u0443\u043b\u044c functools",description:"\u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0438\u0445.",source:"@site/docs/notes/functional-programming/functools.md",sourceDirName:"notes/functional-programming",slug:"/notes/functional-programming/functools",permalink:"/python-guts/notes/functional-programming/functools",draft:!1,editUrl:"https://github.com/insaze/python-guts/tree/main/docs/notes/functional-programming/functools.md",tags:[{label:"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f",permalink:"/python-guts/tags/\u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},{label:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438",permalink:"/python-guts/tags/\u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{label:"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b",permalink:"/python-guts/tags/\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b"},{label:"functools",permalink:"/python-guts/tags/functools"}],version:"current",frontMatter:{tags:["\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f","\u0424\u0443\u043d\u043a\u0446\u0438\u0438","\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b","functools"]},sidebar:"tutorialSidebar",previous:{title:"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",permalink:"/python-guts/notes/functional-programming/"},next:{title:"\u0426\u0435\u043f\u043e\u0447\u043a\u0430 \u043b\u0435\u043d\u0438\u0432\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439",permalink:"/python-guts/notes/functional-programming/lazy-eval-chain"}},i={},s=[{value:"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f",id:"\u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f",level:2},{value:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b",id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b",level:3},{value:"cache",id:"cache",level:4},{value:"lru_cache",id:"lru_cache",level:4},{value:"cached_property",id:"cached_property",level:4},{value:"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435",id:"\u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435-\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435",level:2},{value:"partial",id:"partial",level:3},{value:"partialmethod",id:"partialmethod",level:3},{value:"\u0421\u0432\u0435\u0440\u0442\u043a\u0430",id:"\u0441\u0432\u0435\u0440\u0442\u043a\u0430",level:2},{value:"\u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430",id:"\u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430",level:2},{value:"singledispatch",id:"singledispatch",level:3},{value:"singledispatchmethod",id:"singledispatchmethod",level:3},{value:"\u041e\u0431\u0435\u0440\u0442\u043a\u0430",id:"\u043e\u0431\u0435\u0440\u0442\u043a\u0430",level:2},{value:"wraps",id:"wraps",level:3},{value:"\u0421\u0441\u044b\u043b\u043a\u0438",id:"\u0441\u0441\u044b\u043b\u043a\u0438",level:2}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u043c\u043e\u0434\u0443\u043b\u044c-functools"},"\u041c\u043e\u0434\u0443\u043b\u044c ",(0,a.kt)("inlineCode",{parentName:"h1"},"functools")),(0,a.kt)("p",null,"\u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0438\u0445."),(0,a.kt)("h2",{id:"\u043c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"},"\u041c\u0435\u043c\u043e\u0438\u0437\u0430\u0446\u0438\u044f"),(0,a.kt)("p",null,"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b ",(0,a.kt)("inlineCode",{parentName:"p"},"cache"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"cached_property")," \u0438 ",(0,a.kt)("inlineCode",{parentName:"p"},"lru_cache")," \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c."),(0,a.kt)("p",null,"\u0418 ",(0,a.kt)("inlineCode",{parentName:"p"},"cache"),", \u0438 ",(0,a.kt)("inlineCode",{parentName:"p"},"lru_cache")," \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\n\u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u043a\u044d\u0448\u0430. ",(0,a.kt)("strong",{parentName:"p"},"LRU - Least Recently Used")," (\u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u043d\u0435\u0434\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439) - \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0436\u0435 \u0434\u0430\u0432\u043d\u043e \u043d\u0435\n\u0432\u044b\u0437\u044b\u0432\u0430\u043b\u0430\u0441\u044c \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438, \u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u043a\u044d\u0448\u0430. \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 ",(0,a.kt)("inlineCode",{parentName:"p"},"maxsize"),", \u043f\u043e\n\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0432\u043d\u044b\u043c 128."),(0,a.kt)("h3",{id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b"},"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"),(0,a.kt)("h4",{id:"cache"},"cache"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\n\n@functools.cache\ndef factorial(n):\n    return n * factorial(n - 1) if n else 1\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.perf_counter_ns()\n    factorial(20)\n    print('First call:', time.perf_counter_ns() - start, 'ns')\n\n    start = time.perf_counter_ns()\n    factorial(20)\n    print('Second call:', time.perf_counter_ns() - start, 'ns')\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"First call: 5705 ns\nSecond call: 474 ns\n")),(0,a.kt)("h4",{id:"lru_cache"},"lru_cache"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\n\n@functools.lru_cache(maxsize=64)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import time\n\n    start = time.perf_counter_ns()\n    fib(20)\n    print('First call:', time.perf_counter_ns() - start, 'ns')\n\n    start = time.perf_counter_ns()\n    fib(20)\n    print('Second call:', time.perf_counter_ns() - start, 'ns')\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"First call: 7347 ns\nSecond call: 493 ns\n")),(0,a.kt)("p",null,"\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u044d\u0448\u0435:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"print(fib.cache_info())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CacheInfo(hits=19, misses=21, maxsize=64, currsize=21)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"hits")," - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0439 (\u043a\u043b\u044e\u0447 \u0431\u044b\u043b \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"misses")," - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043c\u0430\u0445\u043e\u0432 (\u043a\u043b\u044e\u0447\u0430 \u043d\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxsize")," - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u044d\u0448\u0430"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"currsize")," - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u044d\u0448\u0430")),(0,a.kt)("p",null,"\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u043a\u044d\u0448 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ",(0,a.kt)("inlineCode",{parentName:"p"},"fib.cache_clear()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"print(fib.cache_info())\nfib.cache_clear()\nprint(fib.cache_info())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CacheInfo(hits=19, misses=21, maxsize=64, currsize=21)\nCacheInfo(hits=0, misses=0, maxsize=64, currsize=0)\n")),(0,a.kt)("h4",{id:"cached_property"},"cached_property"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\n\nclass TestClass:\n    def __init__(self, n):\n        self.n = n\n\n    @functools.cached_property\n    def some_property(self):\n        return ', '.join(map(str, range(self.n)))\n\n\nif __name__ == '__main__':\n    import time\n\n    test = TestClass(1000)\n\n    start = time.perf_counter_ns()\n    result1 = test.some_property\n    print('First call:', time.perf_counter_ns() - start, 'ns')\n\n    start = time.perf_counter_ns()\n    result2 = test.some_property\n    print('Second call:', time.perf_counter_ns() - start, 'ns')\n\n    assert result1 == result2\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"First call: 109523 ns\nSecond call: 394 ns\n")),(0,a.kt)("p",null,"\u041d\u043e \u0437\u0434\u0435\u0441\u044c \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b\u043c - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0443 self.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"if __name__ == '__main__':\n    import time\n\n    test = TestClass(1_000)\n\n    start = time.perf_counter_ns()\n    result1 = test.some_property\n    print('First call:', time.perf_counter_ns() - start, 'ns')\n\n    test.n = 10_000  # \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c n\n    start = time.perf_counter_ns()\n    result2 = test.some_property\n    print('Second call:', time.perf_counter_ns() - start, 'ns')\n\n    assert result1 != result2\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"First call: 107938 ns\nSecond call: 394 ns\nAssertionError\n")),(0,a.kt)("h2",{id:"\u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435-\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435"},"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435")," - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430 \u0440\u0430\u0437 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0436\u0435\u043b\u0430\u0435\u0442, \u043d\u043e \u043d\u0435 \u0432\u0441\u0435."),(0,a.kt)("h3",{id:"partial"},"partial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\n\ndef hello(name, *, title=False, exclamation=False):\n    string = f'hello {name}'\n    if title:\n        string = string.title()\n    if exclamation:\n        string += '!'\n    return string\n\n\nif __name__ == '__main__':\n    hello_title = functools.partial(hello, title=True)\n    hello_exclam = functools.partial(hello, exclamation=True)\n    hello_Alex = functools.partial(hello, 'Alex', title=True)\n    print(hello('Alex'))\n    print(hello_title('Alex'))\n    print(hello_exclam('Alex'))\n    print(hello_Alex())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"hello Alex\nHello Alex\nhello Alex!\nHello Alex\n")),(0,a.kt)("p",null,"\u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\nbasetwo = functools.partial(int, base=2)\nbasetwo.__doc__ = 'Convert base 2 string to an int.'\n\nprint(basetwo('1010100'))\nprint(basetwo('1111111'))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"84\n127\n")),(0,a.kt)("h3",{id:"partialmethod"},"partialmethod"),(0,a.kt)("p",null,"\u0414\u0435\u043b\u0430\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 ",(0,a.kt)("inlineCode",{parentName:"p"},"partial"),", \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0442\u043e\u0447\u0435\u043d \u043f\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\u0430\u0445."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\n\nclass Cell:\n\n    def __init__(self):\n        self._alive = False\n\n    @property\n    def alive(self):\n        return self._alive\n\n    def set_state(self, state):\n        self._alive = bool(state)\n\n    set_alive = functools.partialmethod(set_state, True)\n\n    set_dead = functools.partialmethod(set_state, False)\n\n\nif __name__ == '__main__':\n    c = Cell()\n    print(c.alive)\n    c.set_alive()\n    print(c.alive)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"False\nTrue\n")),(0,a.kt)("h2",{id:"\u0441\u0432\u0435\u0440\u0442\u043a\u0430"},"\u0421\u0432\u0435\u0440\u0442\u043a\u0430"),(0,a.kt)("p",null,"\u0424\u0443\u043d\u043a\u0446\u0438\u044f ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce")," \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0438\u0442\u0435\u0440\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a \u0435\u0434\u0438\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e, \u043f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import reduce\n\nprint(reduce(lambda x, y: x + y, range(100)))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"4950\n")),(0,a.kt)("p",null,"\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440, \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0439 \u0432 \u0440\u043e\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import reduce\n\nprint(reduce(lambda x, y: x + y, range(100), 50))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"5000\n")),(0,a.kt)("p",null,"\u0423\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce")," \u0432\u043a\u0443\u043f\u0435 \u0441 \u043c\u043e\u0434\u0443\u043b\u0435\u043c ",(0,a.kt)("inlineCode",{parentName:"p"},"operator"),", \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ",(0,a.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mul")," \u0438 \u0442.\u043f."),(0,a.kt)("p",null,"\u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u043f\u0430\u0440\u044b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import operator\nfrom functools import reduce\n\narray = (1, 2, 2, 3, 6, 1, 3)\nprint(reduce(operator.xor, array))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"6\n")),(0,a.kt)("h2",{id:"\u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430"},"\u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430"),(0,a.kt)("p",null,"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ",(0,a.kt)("inlineCode",{parentName:"p"},"singledispatch")," \u0438 ",(0,a.kt)("inlineCode",{parentName:"p"},"singledispatchmethod")," \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b. ",(0,a.kt)("inlineCode",{parentName:"p"},"single")," \u0432 \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u0442\u0438\u043f\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430."),(0,a.kt)("h3",{id:"singledispatch"},"singledispatch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from functools import singledispatch\n\n\n@singledispatch\ndef fun(argument, verbose=False):\n    if verbose:\n        print("Let me just say,", end=" ")\n    print(argument)\n\n\n@fun.register\ndef _(argument: int, verbose=False):\n    if verbose:\n        print("Strength in numbers, eh?", end=" ")\n    print(argument)\n\n\n@fun.register\ndef _(argument: list, verbose=False):\n    if verbose:\n        print(\'Enumerate this:\')\n    for i, elem in enumerate(argument):\n        print(i, elem)\n\n\nif __name__ == \'__main__\':\n    fun("Hello", verbose=True)\n    fun(5, verbose=True)\n    fun([9, 8, 7], verbose=True)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Let me just say, Hello\nStrength in numbers, eh? 5\nEnumerate this:\n0 9\n1 8\n2 7\n")),(0,a.kt)("h3",{id:"singledispatchmethod"},"singledispatchmethod"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from functools import singledispatchmethod\n\n\nclass Negator:\n    @singledispatchmethod\n    def neg(self, arg):\n        raise NotImplementedError(\"Cannot negate a\")\n\n    @neg.register\n    def _(self, arg: int):\n        return -arg\n\n    @neg.register\n    def _(self, arg: bool):\n        return not arg\n\n\nif __name__ == '__main__':\n    negator = Negator()\n    print(negator.neg(5))\n    print(negator.neg(False))\n    print(negator.neg('hello'))\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-5\nTrue\nNotImplementedError: Cannot negate a\n")),(0,a.kt)("h2",{id:"\u043e\u0431\u0435\u0440\u0442\u043a\u0430"},"\u041e\u0431\u0435\u0440\u0442\u043a\u0430"),(0,a.kt)("p",null,"\u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u0442\u044c\u0441\u044f \u0441 \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def dec(func):\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n@dec\ndef example():\n    """docstring"""\n    print(\'Example\')\n\n\nprint(example.__name__)\nprint(example.__doc__)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"wrapper\nNone\n")),(0,a.kt)("p",null,"\u0422\u0430\u043a \u043a\u0430\u043a \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper"),", \u0442\u043e \u0443 \u043d\u0430\u0441 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0435\u043a\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\n")),(0,a.kt)("h3",{id:"wraps"},"wraps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from functools import wraps\n\n\ndef dec(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n@dec\ndef example():\n    """docstring"""\n    print(\'Example\')\n\n\nprint(example.__name__)\nprint(example.__doc__)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"example\ndocstring\n")),(0,a.kt)("h2",{id:"\u0441\u0441\u044b\u043b\u043a\u0438"},"\u0421\u0441\u044b\u043b\u043a\u0438"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/functools.html"},"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f. functools"))))}m.isMDXComponent=!0}}]);